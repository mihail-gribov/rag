---
alwaysApply: true
---

# Правила разработки кода

Данный документ содержит основные правила для разработки кода в проекте easy-lessons-bot. Подробное техническое видение проекта описано в [@vision.md](vision.md).

## Утилиты и инструменты

- **Управление зависимостями**: `uv` + `pyproject.toml`
- **Качество кода**: `ruff` (lint + format), `mypy` отложен
- **Тестирование**: `pytest`
- **Автоматизация**: `make`
- **Деплой**: Docker на базе `python:3.12-slim`

## Основные принципы разработки

- **KISS и YAGNI**: минимально необходимая сложность
- **Тесты**: unit-тесты ключевой логики, целевое покрытие 60-70%
- **Качество**: pre-commit с `ruff` и `pytest`, сборка падает при нарушениях
- **Комментарии**: только на английском языке
- **Типизация**: строгая типизация публичных функций

## Стиль кода

- **Стандарт**: PEP 8
- **Docstring**: добавлять там, где поведение неочевидно
- **Импорты**: группировать по стандарту (stdlib, third-party, local)
- **Именование**: snake_case для функций/переменных, PascalCase для классов
- **Длина строк**: максимум 88 символов (ruff default)

## Структура проекта

```
app/          # Точка входа
bot/          # Хэндлеры команд и сообщений
core/         # Бизнес-логика, LLM клиент, состояние
settings/     # Конфигурация через pydantic-settings
tests/        # Unit-тесты
scripts/      # Утилиты разработки
infra/        # Docker, CI конфигурации
```

## Работа с зависимостями

- **Добавление**: `uv add package-name`
- **Удаление**: `uv remove package-name`
- **Обновление**: `uv sync`
- **Группы**: использовать группы зависимостей для dev/test
- **Версии**: фиксировать версии в `pyproject.toml`

## Обработка ошибок

- **LLM запросы**: таймаут + 1 повтор при сетевых/5xx ошибках
- **Пользовательские ошибки**: user-friendly сообщения
- **Логирование**: все ошибки в `/log/app.log` с трассировкой
- **Graceful degradation**: приложение должно продолжать работать при частичных сбоях

## Конфигурация

- **Инструмент**: `pydantic-settings`
- **Источники**: ENV > `.env` > defaults
- **Валидация**: при старте, немедленный выход при ошибках
- **Секреты**: не логировать, скрывать в логах
- **Singleton**: один экземпляр настроек на процесс

## Тестирование

- **Фреймворк**: `pytest`
- **Покрытие**: 60-70% для ключевой логики
- **Структура**: тесты в `tests/`, зеркалируют структуру кода
- **Фикстуры**: использовать для общих setup/teardown
- **Моки**: для внешних зависимостей (LLM, Telegram API)
- **Запуск**: `make test` или `pytest -q`
# Правила разработки кода

Данный документ содержит основные правила для разработки кода в проекте easy-lessons-bot. Подробное техническое видение проекта описано в [@vision.md](vision.md).

## Утилиты и инструменты

- **Управление зависимостями**: `uv` + `pyproject.toml`
- **Качество кода**: `ruff` (lint + format), `mypy` отложен
- **Тестирование**: `pytest`
- **Автоматизация**: `make`
- **Деплой**: Docker на базе `python:3.12-slim`

## Основные принципы разработки

- **KISS и YAGNI**: минимально необходимая сложность
- **Тесты**: unit-тесты ключевой логики, целевое покрытие 60-70%
- **Качество**: pre-commit с `ruff` и `pytest`, сборка падает при нарушениях
- **Комментарии**: только на английском языке
- **Типизация**: строгая типизация публичных функций

## Стиль кода

- **Стандарт**: PEP 8
- **Docstring**: добавлять там, где поведение неочевидно
- **Импорты**: группировать по стандарту (stdlib, third-party, local)
- **Именование**: snake_case для функций/переменных, PascalCase для классов
- **Длина строк**: максимум 88 символов (ruff default)

## Структура проекта

```
app/          # Точка входа
bot/          # Хэндлеры команд и сообщений
core/         # Бизнес-логика, LLM клиент, состояние
settings/     # Конфигурация через pydantic-settings
tests/        # Unit-тесты
scripts/      # Утилиты разработки
infra/        # Docker, CI конфигурации
```

## Работа с зависимостями

- **Добавление**: `uv add package-name`
- **Удаление**: `uv remove package-name`
- **Обновление**: `uv sync`
- **Группы**: использовать группы зависимостей для dev/test
- **Версии**: фиксировать версии в `pyproject.toml`

## Обработка ошибок

- **LLM запросы**: таймаут + 1 повтор при сетевых/5xx ошибках
- **Пользовательские ошибки**: user-friendly сообщения
- **Логирование**: все ошибки в `/log/app.log` с трассировкой
- **Graceful degradation**: приложение должно продолжать работать при частичных сбоях

## Конфигурация

- **Инструмент**: `pydantic-settings`
- **Источники**: ENV > `.env` > defaults
- **Валидация**: при старте, немедленный выход при ошибках
- **Секреты**: не логировать, скрывать в логах
- **Singleton**: один экземпляр настроек на процесс

## Тестирование

- **Фреймворк**: `pytest`
- **Покрытие**: 60-70% для ключевой логики
- **Структура**: тесты в `tests/`, зеркалируют структуру кода
- **Фикстуры**: использовать для общих setup/teardown
- **Моки**: для внешних зависимостей (LLM, Telegram API)
- **Запуск**: `make test` или `pytest -q`
