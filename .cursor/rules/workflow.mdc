---
alwaysApply: true
---

# Workflow для разработки Easy Lessons Bot

## Основные принципы
- Выполнять работу строго по плану из @tasklist.md
- Следовать техническому видению из @vision.md
- Применять принцип KISS (Keep It Simple, Stupid)
- Избегать оверинжиниринга

## Процесс выполнения итерации

### 1. Планирование
- Изучить задачи текущей итерации в @tasklist.md
- Проанализировать зависимости и требования
- Определить предполагаемое решение

### 2. Согласование
- Представить предполагаемое решение с примерами кода
- Обсудить подход и архитектурные решения
- Получить подтверждение перед реализацией

### 3. Реализация
- Реализовать функционал согласно согласованному плану
- Следовать принципам из @vision.md
- Писать оптимальный код по размеру и производительности

### 4. Проверка
- Ожидать подтверждения завершения итерации
- Убедиться в соответствии критериям готовности:
  - Код компилируется без ошибок
  - Все тесты проходят
  - Функционал можно протестировать вручную
  - Логирование работает корректно

### 5. Обновление прогресса
- Отметить выполненные задачи в @tasklist.md
- Обновить статус итерации
- Зафиксировать прогресс

### 6. Завершение
- Согласовать переход к следующей итерации
- Сделать коммит в репозиторий
- Обновить отчет по прогрессу

## Правила работы с кодом
- Все комментарии в коде на английском языке
- Комментарии к коммитам на английском языке
- Применять принципы YAGNI (You Aren't Gonna Need It)

## Критерии качества
- Простота и читаемость кода
- Минимальная сложность архитектуры
- Фокус на необходимом функционале
- Готовность к тестированию
# Workflow для разработки Easy Lessons Bot

## Основные принципы
- Выполнять работу строго по плану из @tasklist.md
- Следовать техническому видению из @vision.md
- Применять принцип KISS (Keep It Simple, Stupid)
- Избегать оверинжиниринга

## Процесс выполнения итерации

### 1. Планирование
- Изучить задачи текущей итерации в @tasklist.md
- Проанализировать зависимости и требования
- Определить предполагаемое решение

### 2. Согласование
- Представить предполагаемое решение с примерами кода
- Обсудить подход и архитектурные решения
- Получить подтверждение перед реализацией

### 3. Реализация
- Реализовать функционал согласно согласованному плану
- Следовать принципам из @vision.md
- Писать оптимальный код по размеру и производительности

### 4. Проверка
- Ожидать подтверждения завершения итерации
- Убедиться в соответствии критериям готовности:
  - Код компилируется без ошибок
  - Все тесты проходят
  - Функционал можно протестировать вручную
  - Логирование работает корректно

### 5. Обновление прогресса
- Отметить выполненные задачи в @tasklist.md
- Обновить статус итерации
- Зафиксировать прогресс

### 6. Завершение
- Согласовать переход к следующей итерации
- Сделать коммит в репозиторий
- Обновить отчет по прогрессу

## Правила работы с кодом
- Все комментарии в коде на английском языке
- Комментарии к коммитам на английском языке
- Применять принципы YAGNI (You Aren't Gonna Need It)

## Критерии качества
- Простота и читаемость кода
- Минимальная сложность архитектуры
- Фокус на необходимом функционале
- Готовность к тестированию
